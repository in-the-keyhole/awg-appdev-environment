parameters:
- name: environment
  type: string
- name: subscription
  type: string
  
jobs:
- deployment: deploy
  displayName: Deploy
  pool:
    vmImage: 'ubuntu-24.04'
  environment: ${{ parameters['environment'] }}
  strategy:
    runOnce:
      deploy:
        steps:
        - download: current
          artifact: artifacts

        - bash: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          displayName: Upgrade Azure CLI

        - task: AzurePowerShell@5
          name: deploy
          displayName: Deploy
          inputs:
            pwsh: true
            azureSubscription: ${{ parameters['subscription'] }}
            azurePowerShellVersion: OtherVersion
            preferredAzurePowerShellVersion: 13.0.0
            workingDirectory: $(Pipeline.Workspace)/artifacts
            scriptType: inlineScript
            inline: |
                function ToStringIfNotEmpty([string]$value) {
                    if ($value -eq $null -or $value -eq "" -or $value.StartsWith("$")) {
                        return $null
                    } else {
                        return $value
                    }
                }

                function ToSecureStringIfNotEmpty([string]$value) {
                    if ($value -eq $null -or $value -eq "" -or $value.StartsWith("$")) {
                        return $null
                    } else {
                        return (ConvertTo-SecureString -AsPlainText $value -Force)
                    }
                }

                function ToBooleanIfNotEmpty([string]$value) {
                    if ($value -eq $null -or $value -eq "" -or $value.StartsWith("$")) {
                        return $null
                    } else {
                        return [bool]::Parse($value)
                    }
                }

                function ToInt32IfNotEmpty([string]$value) {
                    if ($value -eq $null -or $value -eq "" -or $value.StartsWith("$")) {
                        return $null
                    } else {
                        return [int]::Parse($value)
                    }
                }

                function ToInt64IfNotEmpty([string]$value) {
                    if ($value -eq $null -or $value -eq "" -or $value.StartsWith("$")) {
                        return $null
                    } else {
                        return [long]::Parse($value)
                    }
                }

                function ToSingleIfNotEmpty([string]$value) {
                    if ($value -eq $null -or $value -eq "" -or $value.StartsWith("$")) {
                        return $null
                    } else {
                        return [float]::Parse($value)
                    }
                }

                function ToBoolIfTrue([string]$value) {
                    if ($value -eq $null -or $value -ne 'true') {
                        return $false
                    } else {
                        return $true
                    }
                }

                $arg = @{
                    TfStateResourceGroupName                            = ToStringIfNotEmpty('$(TfStateResourceGroupName)')
                    TfStateStorageAccountName                           = ToStringIfNotEmpty('$(TfStateStorageAccountName)')
                    DefaultName                                         = ToStringIfNotEmpty('$(DefaultName)')
                    ReleaseName                                         = ToStringIfNotEmpty('$(GitVersion.FullSemVer)')
                    DefaultTags                                         = (ConvertFrom-Json "$(DefaultTags)")
                    MetadataLocation                                    = ToStringIfNotEmpty('$(MetadataLocation)')
                    ResourceLocation                                    = ToStringIfNotEmpty('$(ResourceLocation)')
                    PlatformSubscriptionId                              = ToStringIfNotEmpty('$(PlatformSubscriptionId)')
                    PlatformName                                        = ToStringIfNotEmpty('$(PlatformName)')
                    PlatformDnsZoneName                                 = ToStringIfNotEmpty('$(PlatformDnsZoneName)')
                    DnsZoneName                                         = ToStringIfNotEmpty('$(DnsZoneName)')
                    RootCaCerts                                         = ToStringIfNotEmpty('$(RootCaCerts)')
                    AcmeServer                                          = ToStringIfNotEmpty('$(AcmeServer)')
                    AcmeEmail                                           = ToStringIfNotEmpty('$(AcmeEmail)')
                    PlatformInternalDnsZoneName                         = ToStringIfNotEmpty('$(PlatformInternalDnsZoneName)')
                    InternalDnsZoneName                                 = ToStringIfNotEmpty('$(InternalDnsZoneName)')
                    InternalAcmeServer                                  = ToStringIfNotEmpty('$(InternalAcmeServer)')
                    InternalAcmeEmail                                   = ToStringIfNotEmpty('$(InternalAcmeEmail)')
                    AksVnetSubnetAddressPrefix                          = ToStringIfNotEmpty('$(AksVnetSubnetAddressPrefix)')
                    AksSkuName                                          = ToStringIfNotEmpty('$(AksSkuName)')
                    AksSkuTier                                          = ToStringIfNotEmpty('$(AksSkuTier)')
                    AksAadAdminGroupObjectIds                           = (ConvertFrom-Json "$(AksAadAdminGroupObjectIds)")
                    AksAvailabilityZones                                = (ConvertFrom-Json "$(AksAvailabilityZones)")
                    AksServiceCidr                                      = ToStringIfNotEmpty('$(AksServiceCidr)')
                    AksDnsServiceIp                                     = ToStringIfNotEmpty('$(AksDnsServiceIp)')
                    AksPodCidr                                          = ToStringIfNotEmpty('$(AksPodCidr)')
                    AksSysNodeSize                                      = ToStringIfNotEmpty('$(AksSysNodeSize)')
                    AksSysMinNodeCount                                  = ToInt32IfNotEmpty('$(AksSysMinNodeCount)')
                    AksSysMaxNodeCount                                  = ToInt32IfNotEmpty('$(RootCaAksSysMaxNodeCountCerts)')
                }

                Write-Debug $arg
                $(Pipeline.Workspace)/artifacts/deploy.ps1 @arg
                